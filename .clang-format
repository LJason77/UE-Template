BasedOnStyle: Google
# 访问修饰符的额外缩进或减少，例如 `public:`
AccessModifierOffset: -4
# 左括号(左圆括号、左尖括号、左方括号)后的对齐
AlignAfterOpenBracket: Align
# 连续赋值时，对齐所有等号
AlignConsecutiveAssignments: false
# 连续声明时，对齐所有声明的变量名
AlignConsecutiveDeclarations: false
# 用于在使用反斜杠换行中对齐反斜杠的选项
AlignEscapedNewlines: DontAlign
# 水平对齐二元和三元表达式的操作数
AlignOperands: Align
# 对齐连续的尾随的注释
AlignTrailingComments: false
# 如果函数调用或带括号的初始化列表不适合全部在一行时，允许将所有参数放到下一行，即使 BinPackArguments 为 false
AllowAllArgumentsOnNextLine: true
# 使用的数据包构造函数初始化器样式
PackConstructorInitializers: Never
# 允许函数声明的所有参数在放在下一行
AllowAllParametersOfDeclarationOnNextLine: true
# 允许短的块放在同一行
AllowShortBlocksOnASingleLine: Empty
# 允许短的 case 标签放在同一行
AllowShortCaseLabelsOnASingleLine: true
# 允许短的函数放在同一行
AllowShortFunctionsOnASingleLine: Inline
# 允许短的 if 语句保持在同一行
AllowShortIfStatementsOnASingleLine: WithoutElse
# 允许短匿 Lambda 函数在单行上
AllowShortLambdasOnASingleLine: All
# 允许短的循环保持在同一行
AllowShortLoopsOnASingleLine: true
# 函数声明返回类型后是否换行
AlwaysBreakAfterReturnType: None
# 总是在多行 string 字面量前换行
AlwaysBreakBeforeMultilineStrings: false
# 总是在 template 声明后换行
AlwaysBreakTemplateDeclarations: Yes
# false 表示函数实参要么都在同一行，要么都各自一行
BinPackArguments: true
# false 表示所有形参要么都在同一行，要么都各自一行
BinPackParameters: true
# 在修饰器之后断行
BreakAfterJavaFieldAnnotations: true
# 在二元运算符前换行
BreakBeforeBinaryOperators: None
# 大括号的换行规则
BreakBeforeBraces: Custom
# 大括号换行，只有当 BreakBeforeBraces 设置为 Custom 时才有效
BraceWrapping:
  # case 语句后面
  AfterCaseLabel: true
  # class 定义后面
  AfterClass: true
  # 控制语句后面
  AfterControlStatement: Always
  # enum 定义后面
  AfterEnum: true
  # 函数定义后面
  AfterFunction: true
  # 命名空间定义后面
  AfterNamespace: true
  # struct 定义后面
  AfterStruct: true
  # union 定义后面
  AfterUnion: true
  # extern 导出块后面
  AfterExternBlock: true
  # catch 之前
  BeforeCatch: true
  # else 之前
  BeforeElse: true
  # 缩进大括号(整个大括号框起来的部分都缩进)
  IndentBraces: false
  # 空函数的大括号是否可以在一行
  SplitEmptyFunction: false
  # 空记录体(struct/class/union)的大括号是否可以在一行
  SplitEmptyRecord: false
  # 空名字空间的大括号是否可以在一行
  SplitEmptyNamespace: false
# 三元运算操作符换行位置
BreakBeforeTernaryOperators: false
# 要使用的构造函数初始化式样式
BreakConstructorInitializers: AfterColon
# 继承链断行风格
BreakInheritanceList: AfterComma
# 每行字符的限制，0表示没有限制
ColumnLimit: 110
# 如果为 false，则在新行上声明每个名称空间
CompactNamespaces: false
# 构造函数的初始化列表的缩进宽度
ConstructorInitializerIndentWidth: 4
# 延续的行的缩进宽度
ContinuationIndentWidth: 4
# 去除 C++11 的列表初始化的大括号 { 后和 } 前的空格
Cpp11BracedListStyle: true
# 继承最常用的指针和引用的对齐方式
DerivePointerAlignment: false
# 关闭格式化
DisableFormat: false
# 如果为 true，则 clang 格式会为短名称空间添加缺少的名称空间结尾注释，并修复无效的现有名称结束注释
FixNamespaceComments: true
# include 块风格
IncludeBlocks: Regroup
# case 块缩进
IndentCaseBlocks: true
# 缩进 case 标签
IndentCaseLabels: true
# 要使用的预处理器指令缩进样式
IndentPPDirectives: None
# 缩进宽度
IndentWidth: 4
# 函数返回类型换行时，缩进函数声明或函数定义的函数名
IndentWrappedFunctionNames: true
# 保留在块开始处的空行
KeepEmptyLinesAtTheStartOfBlocks: false
# 语言
Language: Cpp
# 要使用的行结束样式
LineEnding: LF
# 连续空行的最大数量
MaxEmptyLinesToKeep: 1
# 命名空间的缩进
NamespaceIndentation: All
# 破坏赋值运算符的惩罚
PenaltyBreakAssignment: 18
# 在 call( 后对函数调用换行的惩罚
PenaltyBreakBeforeFirstCallParameter: 5
# 在一个注释中引入换行的惩罚
PenaltyBreakComment: 10
# 第一次在 << 前换行的惩罚
PenaltyBreakFirstLessLess: 3
# 在一个字符串字面量中引入换行的惩罚
PenaltyBreakString: 60
# 模板声明后破坏的惩罚
PenaltyBreakTemplateDeclaration: 7
# 对于每个在行字符数限制之外的字符的惩罚
PenaltyExcessCharacter: 1
# 将函数的返回类型放到它自己的行的惩罚
PenaltyReturnTypeOnItsOwnLine: 50
# 指针和引用的对齐
PointerAlignment: Right
# 允许重新排版注释
ReflowComments: true
# 是否以及如何对 #includes 进行排序
SortIncludes: CaseSensitive
# 是否以及如何对 using 声明进行排序
SortUsingDeclarations: Lexicographic
# 在 C 风格类型转换后添加空格
SpaceAfterCStyleCast: false
# 在逻辑非操作符(!)之后插入一个空格
SpaceAfterLogicalNot: false
# 在 template 关键字后插入一个空格
SpaceAfterTemplateKeyword: false
# 在赋值运算符之前添加空格
SpaceBeforeAssignmentOperators: true
# 大括号列表空格
SpaceBeforeCpp11BracedList: true
# 构造器初始化冒号空格
SpaceBeforeCtorInitializerColon: true
# 继承冒号空格
SpaceBeforeInheritanceColon: true
# 左圆括号之前添加一个空格
SpaceBeforeParens: ControlStatements
# 空格将在基于范围的 for 循环冒号之前被删除
SpaceBeforeRangeBasedForLoopColon: true
# 定义在什么情况下将在之后（和之前）插入空格
SpacesInParens: Never
# 在尾随的评论前添加的空格数(只适用于//)
SpacesBeforeTrailingComments: 1
# 在尖括号的<后和>前添加空格
SpacesInAngles: Never
# 在容器(ObjC 和 JavaScript 的数组和字典等)字面量中添加空格
SpacesInContainerLiterals: false
# 在方括号的[后和]前添加空格，Lambdas 表达式和未指明大小的数组的声明不受影响
SpacesInSquareBrackets: false
# 标准
Standard: c++20
# tab 宽度
TabWidth: 4
# 使用 tab 字符
UseTab: Never
